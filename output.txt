5392893cd6 (Gabriele Cirulli         Fri, 14 Mar 2014 13   1) function GameManager(size, InputManager, Actuator, StorageManager) {
88e084a0d7 (Gabriele Cirulli         Sat, 22 Mar 2014 17   2)   this.size           = size; // Size of the grid
88e084a0d7 (Gabriele Cirulli         Sat, 22 Mar 2014 17   3)   this.inputManager   = new InputManager;
5392893cd6 (Gabriele Cirulli         Fri, 14 Mar 2014 13   4)   this.storageManager = new StorageManager;
88e084a0d7 (Gabriele Cirulli         Sat, 22 Mar 2014 17   5)   this.actuator       = new Actuator;
cf31e146aa (Gabriele Cirulli         Sat, 8 Mar 2014 12   6) 
88e084a0d7 (Gabriele Cirulli         Sat, 22 Mar 2014 17   7)   this.startTiles     = 2;
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   8) 
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   9)   this.inputManager.on("move", this.move.bind(this));
02b66ccb9b (Gabriele Cirulli         Mon, 10 Mar 2014 11   10)   this.inputManager.on("restart", this.restart.bind(this));
9626e2b060 (Laurent Margirier        Thu, 13 Mar 2014 10   11)   this.inputManager.on("keepPlaying", this.keepPlaying.bind(this));
cf31e146aa (Gabriele Cirulli         Sat, 8 Mar 2014 12   12) 
cf31e146aa (Gabriele Cirulli         Sat, 8 Mar 2014 12   13)   this.setup();
cf31e146aa (Gabriele Cirulli         Sat, 8 Mar 2014 12   14) }
cf31e146aa (Gabriele Cirulli         Sat, 8 Mar 2014 12   15) 
02b66ccb9b (Gabriele Cirulli         Mon, 10 Mar 2014 11   16) // Restart the game
02b66ccb9b (Gabriele Cirulli         Mon, 10 Mar 2014 11   17) GameManager.prototype.restart = function () {
02a24c0610 (Mark Frederiksen         Tue, 18 Mar 2014 14   18)   this.storageManager.clearGameState();
2f91247132 (Gabriele Cirulli         Sat, 22 Mar 2014 18   19)   this.actuator.continueGame(); // Clear the game won/lost message
02b66ccb9b (Gabriele Cirulli         Mon, 10 Mar 2014 11   20)   this.setup();
02b66ccb9b (Gabriele Cirulli         Mon, 10 Mar 2014 11   21) };
02b66ccb9b (Gabriele Cirulli         Mon, 10 Mar 2014 11   22) 
6cb3d71a40 (Gabriele Cirulli         Sat, 22 Mar 2014 18   23) // Keep playing after winning (allows going over 2048)
9626e2b060 (Laurent Margirier        Thu, 13 Mar 2014 10   24) GameManager.prototype.keepPlaying = function () {
9626e2b060 (Laurent Margirier        Thu, 13 Mar 2014 10   25)   this.keepPlaying = true;
2f91247132 (Gabriele Cirulli         Sat, 22 Mar 2014 18   26)   this.actuator.continueGame(); // Clear the game won/lost message
9626e2b060 (Laurent Margirier        Thu, 13 Mar 2014 10   27) };
9626e2b060 (Laurent Margirier        Thu, 13 Mar 2014 10   28) 
6cb3d71a40 (Gabriele Cirulli         Sat, 22 Mar 2014 18   29) // Return true if the game is lost, or has won and the user hasn't kept playing
cfbf74905f (Gabriele Cirulli         Fri, 14 Mar 2014 13   30) GameManager.prototype.isGameTerminated = function () {
cf01ca7e8b (Gabriele Cirulli         Sun, 23 Mar 2014 19   31)   return this.over || (this.won && !this.keepPlaying);
9626e2b060 (Laurent Margirier        Thu, 13 Mar 2014 10   32) };
9626e2b060 (Laurent Margirier        Thu, 13 Mar 2014 10   33) 
cf31e146aa (Gabriele Cirulli         Sat, 8 Mar 2014 12   34) // Set up the game
cf31e146aa (Gabriele Cirulli         Sat, 8 Mar 2014 12   35) GameManager.prototype.setup = function () {
02a24c0610 (Mark Frederiksen         Tue, 18 Mar 2014 14   36)   var previousState = this.storageManager.getGameState();
02a24c0610 (Mark Frederiksen         Tue, 18 Mar 2014 14   37) 
6cb3d71a40 (Gabriele Cirulli         Sat, 22 Mar 2014 18   38)   // Reload the game from a previous game if present
02a24c0610 (Mark Frederiksen         Tue, 18 Mar 2014 14   39)   if (previousState) {
02a24c0610 (Mark Frederiksen         Tue, 18 Mar 2014 14   40)     this.grid        = new Grid(previousState.grid.size,
02a24c0610 (Mark Frederiksen         Tue, 18 Mar 2014 14   41)                                 previousState.grid.cells); // Reload grid
02a24c0610 (Mark Frederiksen         Tue, 18 Mar 2014 14   42)     this.score       = previousState.score;
02a24c0610 (Mark Frederiksen         Tue, 18 Mar 2014 14   43)     this.over        = previousState.over;
02a24c0610 (Mark Frederiksen         Tue, 18 Mar 2014 14   44)     this.won         = previousState.won;
c48b92689d (Gabriele Cirulli         Sat, 22 Mar 2014 16   45)     this.keepPlaying = previousState.keepPlaying;
5392893cd6 (Gabriele Cirulli         Fri, 14 Mar 2014 13   46)   } else {
02a24c0610 (Mark Frederiksen         Tue, 18 Mar 2014 14   47)     this.grid        = new Grid(this.size);
02a24c0610 (Mark Frederiksen         Tue, 18 Mar 2014 14   48)     this.score       = 0;
02a24c0610 (Mark Frederiksen         Tue, 18 Mar 2014 14   49)     this.over        = false;
02a24c0610 (Mark Frederiksen         Tue, 18 Mar 2014 14   50)     this.won         = false;
02a24c0610 (Mark Frederiksen         Tue, 18 Mar 2014 14   51)     this.keepPlaying = false;
02a24c0610 (Mark Frederiksen         Tue, 18 Mar 2014 14   52) 
02a24c0610 (Mark Frederiksen         Tue, 18 Mar 2014 14   53)     // Add the initial tiles
02a24c0610 (Mark Frederiksen         Tue, 18 Mar 2014 14   54)     this.addStartTiles();
02a24c0610 (Mark Frederiksen         Tue, 18 Mar 2014 14   55)   }
cf31e146aa (Gabriele Cirulli         Sat, 8 Mar 2014 12   56) 
cf31e146aa (Gabriele Cirulli         Sat, 8 Mar 2014 12   57)   // Update the actuator
cf31e146aa (Gabriele Cirulli         Sat, 8 Mar 2014 12   58)   this.actuate();
cf31e146aa (Gabriele Cirulli         Sat, 8 Mar 2014 12   59) };
cf31e146aa (Gabriele Cirulli         Sat, 8 Mar 2014 12   60) 
cf31e146aa (Gabriele Cirulli         Sat, 8 Mar 2014 12   61) // Set up the initial tiles to start the game with
cf31e146aa (Gabriele Cirulli         Sat, 8 Mar 2014 12   62) GameManager.prototype.addStartTiles = function () {
cf31e146aa (Gabriele Cirulli         Sat, 8 Mar 2014 12   63)   for (var i = 0; i < this.startTiles; i++) {
cf31e146aa (Gabriele Cirulli         Sat, 8 Mar 2014 12   64)     this.addRandomTile();
cf31e146aa (Gabriele Cirulli         Sat, 8 Mar 2014 12   65)   }
cf31e146aa (Gabriele Cirulli         Sat, 8 Mar 2014 12   66) };
cf31e146aa (Gabriele Cirulli         Sat, 8 Mar 2014 12   67) 
cf31e146aa (Gabriele Cirulli         Sat, 8 Mar 2014 12   68) // Adds a tile in a random position
cf31e146aa (Gabriele Cirulli         Sat, 8 Mar 2014 12   69) GameManager.prototype.addRandomTile = function () {
b7476f1f62 (Gabriele Cirulli         Sat, 8 Mar 2014 13   70)   if (this.grid.cellsAvailable()) {
b7476f1f62 (Gabriele Cirulli         Sat, 8 Mar 2014 13   71)     var value = Math.random() < 0.9 ? 2 : 4;
b7476f1f62 (Gabriele Cirulli         Sat, 8 Mar 2014 13   72)     var tile = new Tile(this.grid.randomAvailableCell(), value);
b7476f1f62 (Gabriele Cirulli         Sat, 8 Mar 2014 13   73) 
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   74)     this.grid.insertTile(tile);
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   75)   }
cf31e146aa (Gabriele Cirulli         Sat, 8 Mar 2014 12   76) };
cf31e146aa (Gabriele Cirulli         Sat, 8 Mar 2014 12   77) 
cf31e146aa (Gabriele Cirulli         Sat, 8 Mar 2014 12   78) // Sends the updated grid to the actuator
cf31e146aa (Gabriele Cirulli         Sat, 8 Mar 2014 12   79) GameManager.prototype.actuate = function () {
5392893cd6 (Gabriele Cirulli         Fri, 14 Mar 2014 13   80)   if (this.storageManager.getBestScore() < this.score) {
5392893cd6 (Gabriele Cirulli         Fri, 14 Mar 2014 13   81)     this.storageManager.setBestScore(this.score);
664546ef9a (Tim Petricola            Mon, 10 Mar 2014 16   82)   }
664546ef9a (Tim Petricola            Mon, 10 Mar 2014 16   83) 
8ad8318c7c (Gabriele Cirulli         Sat, 22 Mar 2014 17   84)   // Clear the state when the game is over (game over only, not win)
af683a7856 (Gabriele Cirulli         Sat, 22 Mar 2014 18   85)   if (this.over) {
af683a7856 (Gabriele Cirulli         Sat, 22 Mar 2014 18   86)     this.storageManager.clearGameState();
af683a7856 (Gabriele Cirulli         Sat, 22 Mar 2014 18   87)   } else {
af683a7856 (Gabriele Cirulli         Sat, 22 Mar 2014 18   88)     this.storageManager.setGameState(this.serialize());
af683a7856 (Gabriele Cirulli         Sat, 22 Mar 2014 18   89)   }
02a24c0610 (Mark Frederiksen         Tue, 18 Mar 2014 14   90) 
53e08722e0 (Gabriele Cirulli         Sun, 9 Mar 2014 20   91)   this.actuator.actuate(this.grid, {
cfbf74905f (Gabriele Cirulli         Fri, 14 Mar 2014 13   92)     score:      this.score,
cfbf74905f (Gabriele Cirulli         Fri, 14 Mar 2014 13   93)     over:       this.over,
cfbf74905f (Gabriele Cirulli         Fri, 14 Mar 2014 13   94)     won:        this.won,
5392893cd6 (Gabriele Cirulli         Fri, 14 Mar 2014 13   95)     bestScore:  this.storageManager.getBestScore(),
cfbf74905f (Gabriele Cirulli         Fri, 14 Mar 2014 13   96)     terminated: this.isGameTerminated()
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   97)   });
664546ef9a (Tim Petricola            Mon, 10 Mar 2014 16   98) 
cf31e146aa (Gabriele Cirulli         Sat, 8 Mar 2014 12   99) };
cf31e146aa (Gabriele Cirulli         Sat, 8 Mar 2014 12   100) 
6cb3d71a40 (Gabriele Cirulli         Sat, 22 Mar 2014 18   101) // Represent the current game as an object
02a24c0610 (Mark Frederiksen         Tue, 18 Mar 2014 14   102) GameManager.prototype.serialize = function () {
02a24c0610 (Mark Frederiksen         Tue, 18 Mar 2014 14   103)   return {
02a24c0610 (Mark Frederiksen         Tue, 18 Mar 2014 14   104)     grid:        this.grid.serialize(),
02a24c0610 (Mark Frederiksen         Tue, 18 Mar 2014 14   105)     score:       this.score,
02a24c0610 (Mark Frederiksen         Tue, 18 Mar 2014 14   106)     over:        this.over,
02a24c0610 (Mark Frederiksen         Tue, 18 Mar 2014 14   107)     won:         this.won,
02a24c0610 (Mark Frederiksen         Tue, 18 Mar 2014 14   108)     keepPlaying: this.keepPlaying
02a24c0610 (Mark Frederiksen         Tue, 18 Mar 2014 14   109)   };
02a24c0610 (Mark Frederiksen         Tue, 18 Mar 2014 14   110) };
02a24c0610 (Mark Frederiksen         Tue, 18 Mar 2014 14   111) 
efa2af59a2 (Gabriele Cirulli         Sun, 9 Mar 2014 17   112) // Save all tile positions and remove merger info
efa2af59a2 (Gabriele Cirulli         Sun, 9 Mar 2014 17   113) GameManager.prototype.prepareTiles = function () {
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   114)   this.grid.eachCell(function (x, y, tile) {
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   115)     if (tile) {
53e08722e0 (Gabriele Cirulli         Sun, 9 Mar 2014 20   116)       tile.mergedFrom = null;
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   117)       tile.savePosition();
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   118)     }
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   119)   });
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   120) };
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   121) 
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   122) // Move a tile and its representation
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   123) GameManager.prototype.moveTile = function (tile, cell) {
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   124)   this.grid.cells[tile.x][tile.y] = null;
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   125)   this.grid.cells[cell.x][cell.y] = tile;
efa2af59a2 (Gabriele Cirulli         Sun, 9 Mar 2014 17   126)   tile.updatePosition(cell);
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   127) };
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   128) 
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   129) // Move tiles on the grid in the specified direction
cf31e146aa (Gabriele Cirulli         Sat, 8 Mar 2014 12   130) GameManager.prototype.move = function (direction) {
af683a7856 (Gabriele Cirulli         Sat, 22 Mar 2014 18   131)   // 0: up, 1: right, 2: down, 3: left
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   132)   var self = this;
cf31e146aa (Gabriele Cirulli         Sat, 8 Mar 2014 12   133) 
cfbf74905f (Gabriele Cirulli         Fri, 14 Mar 2014 13   134)   if (this.isGameTerminated()) return; // Don't do anything if the game's over
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   135) 
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   136)   var cell, tile;
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   137) 
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   138)   var vector     = this.getVector(direction);
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   139)   var traversals = this.buildTraversals(vector);
53e08722e0 (Gabriele Cirulli         Sun, 9 Mar 2014 20   140)   var moved      = false;
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   141) 
efa2af59a2 (Gabriele Cirulli         Sun, 9 Mar 2014 17   142)   // Save the current tile positions and remove merger information
efa2af59a2 (Gabriele Cirulli         Sun, 9 Mar 2014 17   143)   this.prepareTiles();
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   144) 
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   145)   // Traverse the grid in the right direction and move tiles
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   146)   traversals.x.forEach(function (x) {
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   147)     traversals.y.forEach(function (y) {
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   148)       cell = { x: x, y: y };
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   149)       tile = self.grid.cellContent(cell);
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   150) 
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   151)       if (tile) {
efa2af59a2 (Gabriele Cirulli         Sun, 9 Mar 2014 17   152)         var positions = self.findFarthestPosition(cell, vector);
efa2af59a2 (Gabriele Cirulli         Sun, 9 Mar 2014 17   153)         var next      = self.grid.cellContent(positions.next);
53e08722e0 (Gabriele Cirulli         Sun, 9 Mar 2014 20   154) 
53e08722e0 (Gabriele Cirulli         Sun, 9 Mar 2014 20   155)         // Only one merger per row traversal?
53e08722e0 (Gabriele Cirulli         Sun, 9 Mar 2014 20   156)         if (next && next.value === tile.value && !next.mergedFrom) {
53e08722e0 (Gabriele Cirulli         Sun, 9 Mar 2014 20   157)           var merged = new Tile(positions.next, tile.value * 2);
53e08722e0 (Gabriele Cirulli         Sun, 9 Mar 2014 20   158)           merged.mergedFrom = [tile, next];
53e08722e0 (Gabriele Cirulli         Sun, 9 Mar 2014 20   159) 
53e08722e0 (Gabriele Cirulli         Sun, 9 Mar 2014 20   160)           self.grid.insertTile(merged);
53e08722e0 (Gabriele Cirulli         Sun, 9 Mar 2014 20   161)           self.grid.removeTile(tile);
53e08722e0 (Gabriele Cirulli         Sun, 9 Mar 2014 20   162) 
53e08722e0 (Gabriele Cirulli         Sun, 9 Mar 2014 20   163)           // Converge the two tiles' positions
53e08722e0 (Gabriele Cirulli         Sun, 9 Mar 2014 20   164)           tile.updatePosition(positions.next);
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   165) 
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   166)           // Update the score
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   167)           self.score += merged.value;
4b3055fcd0 (Gabriele Cirulli         Sun, 9 Mar 2014 23   168) 
4b3055fcd0 (Gabriele Cirulli         Sun, 9 Mar 2014 23   169)           // The mighty 2048 tile
e65111f13b (Gabriele Cirulli         Sun, 9 Mar 2014 23   170)           if (merged.value === 2048) self.won = true;
53e08722e0 (Gabriele Cirulli         Sun, 9 Mar 2014 20   171)         } else {
53e08722e0 (Gabriele Cirulli         Sun, 9 Mar 2014 20   172)           self.moveTile(tile, positions.farthest);
53e08722e0 (Gabriele Cirulli         Sun, 9 Mar 2014 20   173)         }
53e08722e0 (Gabriele Cirulli         Sun, 9 Mar 2014 20   174) 
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   175)         if (!self.positionsEqual(cell, tile)) {
4b3055fcd0 (Gabriele Cirulli         Sun, 9 Mar 2014 23   176)           moved = true; // The tile moved from its original cell!
4b3055fcd0 (Gabriele Cirulli         Sun, 9 Mar 2014 23   177)         }
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   178)       }
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   179)     });
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   180)   });
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   181) 
efa2af59a2 (Gabriele Cirulli         Sun, 9 Mar 2014 17   182)   if (moved) {
efa2af59a2 (Gabriele Cirulli         Sun, 9 Mar 2014 17   183)     this.addRandomTile();
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   184) 
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   185)     if (!this.movesAvailable()) {
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   186)       this.over = true; // Game over!
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   187)     }
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   188) 
53e08722e0 (Gabriele Cirulli         Sun, 9 Mar 2014 20   189)     this.actuate();
53e08722e0 (Gabriele Cirulli         Sun, 9 Mar 2014 20   190)   }
cf31e146aa (Gabriele Cirulli         Sat, 8 Mar 2014 12   191) };
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   192) 
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   193) // Get the vector representing the chosen direction
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   194) GameManager.prototype.getVector = function (direction) {
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   195)   // Vectors representing tile movement
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   196)   var map = {
af683a7856 (Gabriele Cirulli         Sat, 22 Mar 2014 18   197)     0: { x: 0,  y: -1 }, // Up
af683a7856 (Gabriele Cirulli         Sat, 22 Mar 2014 18   198)     1: { x: 1,  y: 0 },  // Right
af683a7856 (Gabriele Cirulli         Sat, 22 Mar 2014 18   199)     2: { x: 0,  y: 1 },  // Down
af683a7856 (Gabriele Cirulli         Sat, 22 Mar 2014 18   200)     3: { x: -1, y: 0 }   // Left
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   201)   };
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   202) 
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   203)   return map[direction];
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   204) };
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   205) 
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   206) // Build a list of positions to traverse in the right order
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   207) GameManager.prototype.buildTraversals = function (vector) {
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   208)   var traversals = { x: [], y: [] };
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   209) 
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   210)   for (var pos = 0; pos < this.size; pos++) {
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   211)     traversals.x.push(pos);
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   212)     traversals.y.push(pos);
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   213)   }
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   214) 
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   215)   // Always traverse from the farthest cell in the chosen direction
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   216)   if (vector.x === 1) traversals.x = traversals.x.reverse();
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   217)   if (vector.y === 1) traversals.y = traversals.y.reverse();
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   218) 
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   219)   return traversals;
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   220) };
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   221) 
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   222) GameManager.prototype.findFarthestPosition = function (cell, vector) {
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   223)   var previous;
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   224) 
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   225)   // Progress towards the vector direction until an obstacle is found
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   226)   do {
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   227)     previous = cell;
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   228)     cell     = { x: previous.x + vector.x, y: previous.y + vector.y };
efa2af59a2 (Gabriele Cirulli         Sun, 9 Mar 2014 17   229)   } while (this.grid.withinBounds(cell) &&
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   230)            this.grid.cellAvailable(cell));
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   231) 
efa2af59a2 (Gabriele Cirulli         Sun, 9 Mar 2014 17   232)   return {
53e08722e0 (Gabriele Cirulli         Sun, 9 Mar 2014 20   233)     farthest: previous,
53e08722e0 (Gabriele Cirulli         Sun, 9 Mar 2014 20   234)     next: cell // Used to check if a merge is required
53e08722e0 (Gabriele Cirulli         Sun, 9 Mar 2014 20   235)   };
b20e26e3bd (Gabriele Cirulli         Sun, 9 Mar 2014 14   236) };
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   237) 
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   238) GameManager.prototype.movesAvailable = function () {
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   239)   return this.grid.cellsAvailable() || this.tileMatchesAvailable();
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   240) };
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   241) 
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   242) // Check for available matches between tiles (more expensive check)
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   243) GameManager.prototype.tileMatchesAvailable = function () {
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   244)   var self = this;
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   245) 
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   246)   var tile;
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   247) 
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   248)   for (var x = 0; x < this.size; x++) {
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   249)     for (var y = 0; y < this.size; y++) {
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   250)       tile = this.grid.cellContent({ x: x, y: y });
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   251) 
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   252)       if (tile) {
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   253)         for (var direction = 0; direction < 4; direction++) {
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   254)           var vector = self.getVector(direction);
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   255)           var cell   = { x: x + vector.x, y: y + vector.y };
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   256) 
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   257)           var other  = self.grid.cellContent(cell);
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   258) 
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   259)           if (other && other.value === tile.value) {
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   260)             return true; // These two tiles can be merged
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   261)           }
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   262)         }
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   263)       }
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   264)     }
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   265)   }
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   266) 
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   267)   return false;
f18f7cee22 (Gabriele Cirulli         Sun, 9 Mar 2014 23   268) };
4b3055fcd0 (Gabriele Cirulli         Sun, 9 Mar 2014 23   269) 
4b3055fcd0 (Gabriele Cirulli         Sun, 9 Mar 2014 23   270) GameManager.prototype.positionsEqual = function (first, second) {
4b3055fcd0 (Gabriele Cirulli         Sun, 9 Mar 2014 23   271)   return first.x === second.x && first.y === second.y;
4b3055fcd0 (Gabriele Cirulli         Sun, 9 Mar 2014 23   272) };
cf31e146aa (Gabriele Cirulli         Sat, 8 Mar 2014 12   273) 
